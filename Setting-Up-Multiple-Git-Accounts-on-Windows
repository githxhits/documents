
Let's go

---

## Setting Up Multiple Git Accounts on Windows

### Step 1: Generate Public and Private Keys
1. Open your terminal and navigate to the `.ssh` directory:
   ```
   cd C:/Users/hxhits/.ssh/
   ```
2. Run the following command to generate your SSH keys:
   ```
   ssh-keygen -t rsa -b 4096 -C "<your PC account>"
   ```
   **Example:** If your PC account is `demo.com.vn\hxhits@LAA00257839B`, the command should be:
   ```
   ssh-keygen -t rsa -b 4096 -C "demo.com.vn\hxhits@LAA00257839B"
   ```
3. When prompted, specify a filename following this pattern: `id_rsa_<name>`. Press `Enter` to skip passphrase options.
4. After completion, your public (`id_rsa_<name>.pub`) and private keys will be in the `C:/Users/hxhits/.ssh/` directory.

### Step 2: Add SSH Key to GitLab/GitHub
1. Log in to your GitLab or GitHub account.
2. Navigate to:
   - **GitLab:** Profile -> Preferences -> SSH Keys
   - **GitHub:** Profile -> Settings -> SSH and GPG keys -> New SSH Key
3. Copy the content of your public key file (`id_rsa_<name>.pub`) and paste it into the SSH Key section.

### Step 3: Configure Git for Multiple Accounts
1. **Create Git Config Files for Each Account:**
   - **XXX Account Config:**
     ```
     C:/Users/hxhits/.gitconfig-xxx:
     [user]
       name = <your git account name>
       email = <your email>
     [core]
       sshCommand = "ssh -i ~/.ssh/id_rsa_xxx"
     ```
   - **YYY Account Config:**
     ```
     C:/Users/hxhits/.gitconfig-yyy:
     [user]
       name = <your git account name>
       email = <your email>
     [core]
       sshCommand = "ssh -i ~/.ssh/id_rsa_yyy"
     ```
2. **Edit the SSH Config File:**
   Create or edit `C:/Users/hxhits/.ssh/config`:
   ```
   Host xxx
     Hostname gitlab.com
     User git
     IdentityFile ~/.ssh/id_rsa_xxx
     IdentitiesOnly yes
   
   Host yyy
     Hostname ghe.company.com
     User git
     IdentityFile ~/.ssh/id_rsa_yyy
     IdentitiesOnly yes
   ```

3. **Update the Main Git Config:**
   Add the following to `C:/Users/hxhits/.gitconfig`:
   ```
   [filter "lfs"]
     clean = git-lfs clean -- %f
     smudge = git-lfs smudge -- %f
     process = git-lfs filter-process
     required = true
   [includeIf "gitdir:<full-path-to-workspace, ex: D:/sources/>"]
     path = .gitconfig-xxx
   [includeIf "gitdir:<full-path-to-workspace, ex: D:/sources/>"]
     path = .gitconfig-yyy
   [core]
     sshCommand = C:/Windows/System32/OpenSSH/ssh.exe 
     autocrlf = true
   ```

### Step 4: Start SSH Agent and Add Keys
1. Open PowerShell and run:
   ```
   Start-Service ssh-agent
   ssh-add C:/Users/hxhits/.ssh/id_rsa_xxx
   ssh-add C:/Users/hxhits/.ssh/id_rsa_yyy
   ssh-add -l  # List all added keys
   ```

### Step 5: Test Connection and Clone Repositories
1. Test SSH connection:
   ```
   ssh -T git@<host from .ssh/config>
   ```
   **Example:**
   ```
   ssh -T git@xxx
   ```
2. Clone your repositories:
   ```
   git clone https://<git-account-name>@gitlab.com/<path-repo>
   ```
   **Example:**
   ```
   https://gitlab.com/my-repo/account-service.git
   => git clone https://hhuong@gitlab.com/my-repo/account-service.git
   
   https://ghe.company.com/infrastructure.git
   => git clone https://hhoang@ghe.company.com/infrastructure.git
   ```

---

Done
